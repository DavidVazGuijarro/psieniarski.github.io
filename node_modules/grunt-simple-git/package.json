{
  "name": "grunt-simple-git",
  "description": "A simple API for using git via grunt",
  "version": "0.1.0",
  "homepage": "http://www.tandrewnichols.me/modules/grunt-simple-git",
  "author": {
    "name": "Andrew Nichols",
    "email": "tandrewnichols@gmail.com",
    "url": "www.tandrewnichols.me"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:tandrewnichols/grunt-simple-git.git"
  },
  "bugs": {
    "url": "https://github.com/tandrewnichols/grunt-simple-git/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/tandrewnichols/grunt-simple-git/blob/master/LICENSE-MIT"
    }
  ],
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt",
    "publish": "if echo $USERNAME | grep -cq 'anichols'; then publisher run; fi"
  },
  "dependencies": {
    "simple-cli": "^0.1.0"
  },
  "devDependencies": {
    "coffee-script": "^1.7.1",
    "grunt": "^0.4.5",
    "grunt-contrib-jshint": "^0.10.0",
    "grunt-mocha-cov": "^0.3.0",
    "grunt-mocha-test": "^0.11.0",
    "grunt-travis-matrix": "0.0.2",
    "indeed": "^1.0.6",
    "jshint-stylish": "^0.4.0",
    "mocha": "git://github.com/tandrewnichols/mocha.git#suppress-stack",
    "mocha-given": "git://github.com/tandrewnichols/mocha-given.git",
    "mocha-lcov-reporter": "0.0.1",
    "proxyquire": "^1.0.1",
    "sinon": "^1.10.3"
  },
  "keywords": [
    "gruntplugin",
    "git",
    "deploy"
  ],
  "main": "./tasks/git.js",
  "config": {
    "blanket": {
      "pattern": [
        "grunt-simple-git/tasks"
      ]
    }
  },
  "readme": "[![Build Status](https://travis-ci.org/tandrewnichols/grunt-simple-git.png)](https://travis-ci.org/tandrewnichols/grunt-simple-git) [![downloads](http://img.shields.io/npm/dm/grunt-simple-git.svg)](https://npmjs.org/package/grunt-simple-git) [![npm](http://img.shields.io/npm/v/grunt-simple-git.svg)](https://npmjs.org/package/grunt-simple-git) [![Code Climate](https://codeclimate.com/github/tandrewnichols/grunt-simple-git/badges/gpa.svg)](https://codeclimate.com/github/tandrewnichols/grunt-simple-git) [![Test Coverage](https://codeclimate.com/github/tandrewnichols/grunt-simple-git/badges/coverage.svg)](https://codeclimate.com/github/tandrewnichols/grunt-simple-git) [![dependencies](https://david-dm.org/tandrewnichols/grunt-simple-git.png)](https://david-dm.org/tandrewnichols/grunt-simple-git)\n\n[![NPM info](https://nodei.co/npm/grunt-simple-git.png?downloads=true)](https://nodei.co/npm/grunt-simple-git.png?downloads=true)\n\n# grunt-simple-git\n\nA simple API for using git via grunt\n\n## Getting Started\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```bash\nnpm install grunt-simple-git --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with:\n\n```javascript\ngrunt.loadNpmTasks('grunt-simple-git');\n```\n\nAlternatively, install and use [task-master](https://github.com/tandrewnichols/task-master), and it will handle this for you.\n\n## The \"git\" task\n\nThere are lots of other git plugins for grunt out there. In the past, I've always looked at them and thought, \"Why??? What's the value in wrapping git commands in grunt tasks?\" Then I started working on my website, which is hosted on heroku, but includes dynamic content from the modules I've published, and I realized that I would like a way to easily grab updated READMEs and coverage files, copy them into my website, then stage, commit, and push them with git. The first part of that is easy: `grunt-contrib-copy` works perfectly for that, but then I wanted a simple interface for automating my git commands, and I wasn't satisfied with the grunt-git plugins out there. It seems like they all make it more difficult than it should be. I wanted to be able to specify any git command as a task and pass any existing git option to it in an easy way. So that's what this plugin does.\n\n### Overview\n\nThe `git` task is a multiTask, where the target is (usually) the git command to run. You can configure as many git commands as are useful to you either in your `grunt.initConfig` call or, as mentioned above, by using [task-master](https://github.com/tandrewnichols/task-master). I strongly recommend using task-master . . . not just because I wrote it. I wrote it because grunt configuration is messy and annoying and sometimes, at least with `loadNpmTasks`, redundant (I was shocked to learn that you can't pass more than one string to `loadNpmTasks` - it's plural . . . doesn't that mean I should be able to do `grunt.loadNpmTasks('grunt-foo', 'grunt-bar', 'grunt-baz')`? . . . apparently not). I've been using task-master for everything I write now for a few months, and it just makes grunt more pleasurable to use. Things are nicely separated . . . but I digress. Here's a sample configuration:\n\n```javascript\ngrunt.initConfig({\n  git: {\n    status: {\n      options: {\n        short: true\n      }\n    },\n    add: {\n      options: {\n        all: true\n      }\n    },\n    commit: {\n      options: {\n        message: 'Automated commit'\n      }\n    },\n    pushToOrigin: {\n      cmd: 'push origin master'\n    },\n    pushToHeroku: {\n      cmd: 'push heroku master'\n    }\n  },\n});\n```\n\nThen add an alias task to bundle them into one thing. I use something like this:\n\n```javascript\ngrunt.registerTask('deploy', ['copy', 'git:add', 'git:commit', 'git:pushToOrigin', 'git:pushToHeroku']);\n```\n\nNow I simply run `grunt deploy` from the command line and all my readmes and coverage files are copied, staged, committed, and pushed automatically.\n\n### Options\n\nAny git option can be specified, though there are some variations. Any long or short option can be specified using camelCase notation (it will be converted to dash notation):\n\n```javascript\ngrunt.initConfig({\n  git: {\n    log: {\n      // Short option - Runs 'git log -n 2'\n      n: 2\n    },\n    commit: {\n      // Long option - Runs 'git commit --message \"A message\"'\n      message: 'A message'\n    }\n  }\n});\n```\n\nOptions that are just flags (i.e. they have no value after them) are specified with `true`:\n\n```javascript\ngrunt.initConfig({\n  git: {\n    // 'git log --name-only'\n    log: {\n      nameOnly: true\n    },\n    // 'git commit -na -m \"A message\"'\n    commit: {\n      m: 'A message',\n      n: true,\n      a: true\n    }\n  }\n});\n```\n\nYou can also specify `=` style options. Just add `=` to the end of the arg:\n\n```javascript\ngrunt.initConfig({\n  git: {\n    // 'git show --summary --format=%s'\n    show: {\n      summary: true,\n      'format=': '%s'\n    }\n  }\n});\n```\n\nSub-commands that aren't options (e.g. \"git push origin master\", \"git checkout foo\", \"git show HEAD~\", etc.) can be specified using the `cmd` key.\n\n```javascript\ngrunt.initConfig({\n  git: {\n    // 'git push origin master --dry-run'\n    push: {\n      options: {\n        dryRun: true\n      },\n      cmd: 'push origin master'\n    }\n  }\n});\n```\n\nIt might seem redundant specifying `push` as part of the `cmd` when it's the name of the target, but that's because the `cmd` option doubles as a way to run the same git command with different arguments:\n\n```javascript\ngrunt.initConfig({\n  git: {\n    // 'git push origin master'\n    origin: {\n      cmd: 'push origin master'\n    },\n    // 'git push heroku master'\n    heroku: {\n      cmd: 'push heroku master'\n    }\n  }\n});\n```\n\nAdditionally, if `cmd` is the configuration you need, you can pass that as the entirety of the task body:\n\n```javascript\ngrunt.initConfig({\n  git: {\n    push: 'push origin master'\n  }\n});\n```\n\nFinally, if your usage doesn't fit these formats, you can specify raw arguments to pass to git using the `rawArgs` option:\n\n```javascript\ngrunt.initConfig({\n  git: {\n    // 'git checkout master -- config/*.json'\n    checkout: {\n      cmd: 'checkout master',\n      rawArgs: '-- config/*.json'\n    }\n  }\n});\n```\n\nThere are also a few non-git related options: `stdio` and `cwd` which are passed as is to `child_process.spawn` (defaults are `inherit` and `process.cwd()` respectivly) and `force`, which you can use for non-critical git commands that should not halt the grunt task chain (like `--force` but on a per task basis). These are under `options` so that they can be specified for all tasks if desired. If you want to turn off `stdio` altogether (which you probably shouldn't do), you can pass `stdio: false`.\n\n```javascript\ngrunt.initConfig({\n  git: {\n    options: {\n      cwd: '..',\n      stdio: false\n    },\n    add: {\n      options: {\n        all: true\n      }\n    }\n  }\n});\n```\n\n## Coming soon\n\nFilling in options after the fact via prompt (perfect for `git commit --message` for example).\n\nIdeally, you wouldn't have to do `cmd: 'push origin master'` if the name of the target was `push`. There's no easy way to handle this immediately, but I'd like to improve that eventually.\n",
  "readmeFilename": "README.md",
  "_id": "grunt-simple-git@0.1.0",
  "_from": "grunt-simple-git@~0.1.0"
}
